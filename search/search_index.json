{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#kyotsu","title":"Ky\u014dts\u016b \u5171\u901a","text":"<p>A package with common logic and use cases used as foundation for microservices.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Config module for standardized and abstract pydantic settings (<code>kyotsu.config</code>)</li> <li>Reusable <code>BaseSettings</code> class, preconfigured for standardized nested models</li> <li>Generic Abstract <code>DBConnection</code> model for Database Connections</li> <li>Standardized nested models for Database Connections: <code>RedisConnection</code>,     <code>PostgresConnection</code>, <code>OpenSearchNoCertConnection</code></li> <li>Generic Abstract <code>HttpService</code> and <code>GrpcService</code> models for service routing</li> </ul>"},{"location":"about/tags/","title":"Tags index","text":""},{"location":"about/tags/#tag:api-reference","title":"API Reference","text":"<ul> <li>            Base          </li> <li>            Databases          </li> <li>            Inner Types          </li> <li>            Ky\u014dts\u016b config          </li> <li>            Services          </li> </ul>"},{"location":"about/tags/#tag:base","title":"Base","text":"<ul> <li>            Base          </li> </ul>"},{"location":"about/tags/#tag:configuration","title":"Configuration","text":"<ul> <li>            Base          </li> <li>            Databases          </li> <li>            Inner Types          </li> <li>            Ky\u014dts\u016b config          </li> <li>            Services          </li> </ul>"},{"location":"about/tags/#tag:databases","title":"Databases","text":"<ul> <li>            Databases          </li> <li>            Inner Types          </li> </ul>"},{"location":"about/tags/#tag:external-services","title":"External Services","text":"<ul> <li>            Services          </li> </ul>"},{"location":"about/tags/#tag:types","title":"Types","text":"<ul> <li>            Inner Types          </li> </ul>"},{"location":"development/","title":"Ky\u014dts\u016b Development","text":""},{"location":"modules/","title":"Ky\u014dts\u016b Modules Reference","text":""},{"location":"modules/config/","title":"<code>Config</code> Module","text":"","tags":["API Reference","Configuration"]},{"location":"modules/config/#config-basics","title":"Config Basics","text":"","tags":["API Reference","Configuration"]},{"location":"modules/config/#kyotsu.config","title":"<code>kyotsu.config</code>","text":"<p>Danger: Only modify these classes if you are completely certain of the implications, as numerous core settings in external services are dependent on them.</p>","tags":["API Reference","Configuration"]},{"location":"modules/config/base/","title":"Ky\u014dts\u016b Config - Base","text":"","tags":["API Reference","Configuration","Base"]},{"location":"modules/config/base/#kyotsu.config.base","title":"<code>kyotsu.config.base</code>","text":"<p>The <code>kyotsu.config.base</code> module provides a base settings configuration class for the application. This class ensures a uniform way to manage configurations including environment variables across the entire application, contributing to the maintenance and consistency of the codebase.</p> CLASS DESCRIPTION <code>BaseSettings</code> <p>An abstract class that encapsulates the base configuration settings for models using           the Pydantic settings configuration approach.</p>","tags":["API Reference","Configuration","Base"]},{"location":"modules/config/base/#kyotsu.config.base.BaseSettings","title":"<code>BaseSettings</code>","text":"<p>             Bases: <code>BaseSettings</code></p> <p>A base settings configuration class that simplifies environment-based settings for Pydantic models.</p> <p>It includes environmental settings specified as '__'-separated nested properties and the encoding for .env files is 'utf-8'.</p> ATTRIBUTE DESCRIPTION <code>IS_DEV</code> <p>A boolean flag indicating whether the application is running in development mode.</p> <p> TYPE: <code>bool</code> </p> <code>model_config</code> <p>Configuration dictionary for the settings model.                                It sets the delimiter and encoding standard for environment variables.</p> <p> TYPE: <code>SettingsConfigDict</code> </p> Source code in <code>src/kyotsu/config/base.py</code> <pre><code>class BaseSettings(PydanticSettings):\n    \"\"\"\n    A base settings configuration class that simplifies environment-based settings for Pydantic models.\n\n    It includes environmental settings specified as '__'-separated nested properties and the encoding\n    for .env files is 'utf-8'.\n\n    Attributes:\n        IS_DEV: A boolean flag indicating whether the application is running in development mode.\n        model_config (SettingsConfigDict): Configuration dictionary for the settings model.\n                                           It sets the delimiter and encoding standard for environment variables.\n    \"\"\"\n\n    IS_DEV: bool = False\n\n    model_config = SettingsConfigDict(\n        extra=\"allow\",\n        env_nested_delimiter=\"__\",\n        env_file_encoding=\"utf-8\",\n    )\n</code></pre>","tags":["API Reference","Configuration","Base"]},{"location":"modules/config/services/","title":"Ky\u014dts\u016b Config - Services","text":"","tags":["API Reference","Configuration","External Services"]},{"location":"modules/config/services/#kyotsu.config.services","title":"<code>kyotsu.config.services</code>","text":"<p>This module contains base models for defining application settings involving HTTP and gRPC services.</p> <p>These models should be used in a nested manner with <code>BaseSettings</code> class.</p> Example <pre><code>&gt;&gt;&gt; from kyotsu.config import BaseSettings, HttpService, GrpcService, HttpGrpcService\n\n&gt;&gt;&gt; class Settings(BaseSettings):\n...     EXTERNAL_HTTP_SERVICE_NAME: HttpService\n...     EXTERNAL_GRPC_SERVICE_NAME: GrpcService\n...     EXTERNAL_HTTP_GRPC_SERVICE_NAME: HttpGrpcService\n</code></pre> <p>In the above example, <code>EXTERNAL_HTTP_SERVICE_NAME</code>, <code>EXTERNAL_GRPC_SERVICE_NAME</code>, and <code>EXTERNAL_HTTP_GRPC_SERVICE_NAME</code> will contain the configuration for each respective service type.</p> CLASS DESCRIPTION <code>HttpService</code> <p>Defines and validates the HTTP_URL attribute representing the URL for HTTP communication          with a service.</p> <code>GrpcService</code> <p>Defines and validates the GRPC_HOST and GRPC_PORT attributes required for GRPC communication          with a service.</p> <code>HttpGrpcService</code> <p>A combination of HttpService and GrpcService, for services that offer both              HTTP and GRPC interfaces.</p>","tags":["API Reference","Configuration","External Services"]},{"location":"modules/config/services/#kyotsu.config.services.HttpService","title":"<code>HttpService</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>This class represents the standard attributes for a service that interacts via HTTP.</p> ATTRIBUTE DESCRIPTION <code>HTTP_URL</code> <p>The URL for the HTTP service.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/services.py</code> <pre><code>class HttpService(BaseModel):\n    \"\"\"\n    This class represents the standard attributes for a service that interacts via HTTP.\n\n    Attributes:\n        HTTP_URL: The URL for the HTTP service.\n    \"\"\"\n\n    HTTP_URL: Annotated[str, HttpUrl]\n</code></pre>","tags":["API Reference","Configuration","External Services"]},{"location":"modules/config/services/#kyotsu.config.services.GrpcService","title":"<code>GrpcService</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>This class represents the standard attributes for a service that interacts via gRPC.</p> ATTRIBUTE DESCRIPTION <code>GRPC_HOST</code> <p>The host for the gRPC service.</p> <p> TYPE: <code>str</code> </p> <code>GRPC_PORT</code> <p>The port for the gRPC service.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/services.py</code> <pre><code>class GrpcService(BaseModel):\n    \"\"\"\n    This class represents the standard attributes for a service that interacts via gRPC.\n\n    Attributes:\n        GRPC_HOST: The host for the gRPC service.\n        GRPC_PORT: The port for the gRPC service.\n    \"\"\"\n\n    GRPC_HOST: str\n    GRPC_PORT: str\n</code></pre>","tags":["API Reference","Configuration","External Services"]},{"location":"modules/config/services/#kyotsu.config.services.HttpGrpcService","title":"<code>HttpGrpcService</code>","text":"<p>             Bases: <code>HttpService</code>, <code>GrpcService</code></p> <p>A combined service class that possesses both HTTP and gRPC attributes.</p> ATTRIBUTE DESCRIPTION <code>HTTP_URL</code> <p>The URL for the HTTP service.</p> <p> </p> <code>GRPC_HOST</code> <p>The host for the gRPC service.</p> <p> </p> <code>GRPC_PORT</code> <p>The port for the gRPC service.</p> <p> </p> Source code in <code>src/kyotsu/config/services.py</code> <pre><code>class HttpGrpcService(HttpService, GrpcService):\n    \"\"\"\n    A combined service class that possesses both HTTP and gRPC attributes.\n\n    Attributes:\n        HTTP_URL: The URL for the HTTP service.\n        GRPC_HOST: The host for the gRPC service.\n        GRPC_PORT: The port for the gRPC service.\n    \"\"\"\n</code></pre>","tags":["API Reference","Configuration","External Services"]},{"location":"modules/config/databases/","title":"Ky\u014dts\u016b Config - Databases","text":"","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases","title":"<code>kyotsu.config.databases</code>","text":"<p>This module provides the models and mix-ins necessary for configuring and maintaining the connections to various databases across the application.</p> <p>The configuration for different types of database connections are defined and standardized in this package, ensuring the consistency and maintainability of the codebase.</p> MODULE DESCRIPTION <code>models</code> <p>Defines the models for various types of database connections used across the application.</p> <code>_types</code> <p>Contains inner misc types for mixins and models.</p> <p>When needing to configure a new database connection or reuse an existing common configuration across multiple services, these modules should be the first place to look.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models","title":"<code>kyotsu.config.databases.models</code>","text":"<p>This module contains base models for defining database connection settings.</p> <p>Each model class in this module represents a different type of database connection.</p> <p>All classes derived from <code>DBConnection</code> that use separate properties (<code>USERNAME</code>, <code>PASSWORD</code>, <code>HOST</code>, <code>PORT</code>, <code>DATABASE</code>) to define a connection string (<code>CONN_STR</code>) use two main methods:</p> <ul> <li> <p><code>_assemble_conn_str_value()</code>: an abstract method, which needs to be defined in subclasses. It is responsible for creating the actual connection string value.</p> </li> <li> <p><code>assemble_conn_str()</code>: a model validator, which checks whether <code>CONN_STR</code> is <code>None</code>. If yes, it builds the connection string using <code>_assemble_conn_str_value()</code>.</p> </li> </ul> CLASS DESCRIPTION <code>DBConnection</code> <p>Abstract class that can be inherited to represent different types of DB connections.</p> <code>AmqpConnection</code> <p>Represents an AMQP (Advanced Message Queuing Protocol) connection.</p> <code>OpenSearchNoCertConnection</code> <p>Represents an OpenSearch connection without requiring SSL certification.</p> <code>PostgresConnection</code> <p>Represents a connection to a Postgres database using either asyncpg or psycopg2 scheme.</p> <code>RedisConnection</code> <p>Represents a Redis database connection string with support for SSL.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.DBConnection","title":"<code>DBConnection</code>","text":"<p>             Bases: <code>BaseModel</code>, <code>Generic[ConnType]</code>, <code>ABC</code></p> <p>This abstract base model class represents a generic database connection.</p> <p>It is designed to be inherited by subclasses that represent specific database connections.</p> <p>Subclasses must implement the <code>_assemble_conn_str_value</code> method to generate the necessary connection string representation for a specific database type.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username for the database connection.</p> <p> TYPE: <code>str | None</code> </p> <code>PASSWORD</code> <p>The password for the database connection.</p> <p> TYPE: <code>str | None</code> </p> <code>HOST</code> <p>The host for the database connection.</p> <p> TYPE: <code>str | None</code> </p> <code>PORT</code> <p>The port for the database connection.</p> <p> TYPE: <code>str | None</code> </p> <code>DATABASE</code> <p>The specific database to connect to.</p> <p> TYPE: <code>str | None</code> </p> <code>CONN_STR</code> <p>The connection string, assembled from the other properties.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/databases/models.py</code> <pre><code>class DBConnection(BaseModel, Generic[ConnType], abc.ABC):\n    \"\"\"\n    This abstract base model class represents a generic database connection.\n\n    It is designed to be inherited by subclasses that represent specific database connections.\n\n    Subclasses must implement the `_assemble_conn_str_value` method to generate the necessary connection string\n    representation for a specific database type.\n\n    Attributes:\n        USERNAME (str | None): The username for the database connection.\n        PASSWORD (str | None): The password for the database connection.\n        HOST (str | None): The host for the database connection.\n        PORT (str | None): The port for the database connection.\n        DATABASE (str | None): The specific database to connect to.\n        CONN_STR (Annotated[str, ConnType]): The connection string, assembled from the other properties.\n    \"\"\"\n\n    USERNAME: str | None = None\n    PASSWORD: str | None = None\n    HOST: str | None = None\n    PORT: int | None = None\n    DATABASE: str | None = None\n\n    @computed_field\n    @property\n    def CONN_STR(self: Self) -&gt; Annotated[str, ConnType]:\n        \"\"\"\n        The connection string, assembled from the other properties.\n\n        This attribute is computed by calling the `_assemble_conn_str_value` method.\n\n        Returns:\n            The connection string, assembled from the other properties.\n        \"\"\"\n        return str(self._assemble_conn_str_value())\n\n    @abc.abstractmethod\n    def _assemble_conn_str_value(self: Self) -&gt; ConnType:\n        \"\"\"\n        Abstract method that subclasses must implement to generate a connection string representation.\n\n        Arguments:\n            self (Self): A reference to the instance of a subclass that this method will be called on.\n\n        Returns:\n            ConnType: A connection string that can be directly used by the specific type of database client\n                to create a connection with the database.\n        \"\"\"\n        ...\n</code></pre>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.DBConnection.CONN_STR","title":"<code>CONN_STR: Annotated[str, ConnType]</code>  <code>property</code>","text":"<p>The connection string, assembled from the other properties.</p> <p>This attribute is computed by calling the <code>_assemble_conn_str_value</code> method.</p> RETURNS DESCRIPTION <code>str</code> <p>The connection string, assembled from the other properties.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.AmqpConnection","title":"<code>AmqpConnection</code>","text":"<p>             Bases: <code>DBConnection[AmqpDsn]</code></p> <p>Represents an AMQP (Advanced Message Queuing Protocol) connection.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username for this AMQP service.</p> <p> TYPE: <code>str</code> </p> <code>PASSWORD</code> <p>The password for this AMQP service.</p> <p> TYPE: <code>str</code> </p> <code>HOST</code> <p>The host of the AMQP service.</p> <p> TYPE: <code>str</code> </p> <code>PORT</code> <p>[Optional] The port of the AMQP service. Default is 5672.</p> <p> TYPE: <code>int</code> </p> <code>DATABASE</code> <p>[Optional] The database for this AMQP service. Default is \"%2f\", a placeholder for root level.</p> <p> TYPE: <code>str</code> </p> <code>USE_SSL</code> <p>[Optional] If true, the AMQP service is assumed to use SSL. Default is True.</p> <p> TYPE: <code>bool</code> </p> <code>QUERY_PARAMS</code> <p>[Optional] Set of optional parameters for the connection, including backpressure detection, channel max, etc.</p> <p> TYPE: <code>AmqpQueryParams | None</code> </p> <code>CONN_STR</code> <p>The connection string for the AMQP service, assembled from the other properties.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/databases/models.py</code> <pre><code>class AmqpConnection(DBConnection[AmqpDsn]):\n    \"\"\"\n    Represents an AMQP (Advanced Message Queuing Protocol) connection.\n\n    Attributes:\n        USERNAME (str): The username for this AMQP service.\n        PASSWORD (str): The password for this AMQP service.\n        HOST (str): The host of the AMQP service.\n        PORT (int): [Optional] The port of the AMQP service. Default is 5672.\n        DATABASE (str): [Optional] The database for this AMQP service. Default is \"%2f\", a placeholder for root level.\n        USE_SSL (bool): [Optional] If true, the AMQP service is assumed to use SSL. Default is True.\n        QUERY_PARAMS (AmqpQueryParams | None): [Optional] Set of optional parameters for the connection,\n            including backpressure detection, channel max, etc.\n\n        CONN_STR (str): The connection string for the AMQP service, assembled from the other properties.\n    \"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    USERNAME: str\n    PASSWORD: str\n    HOST: str\n    PORT: int = 5672\n    # \"%2f\" value is used as default virtual host\n    # https://pika.readthedocs.io/en/stable/modules/parameters.html#pika.connection.URLParameters\n    DATABASE: str = \"%2f\"\n\n    USE_SSL: bool = True\n    QUERY_PARAMS: AmqpQueryParams | None = None\n\n    def _assemble_conn_str_value(self: Self) -&gt; AmqpDsn:\n        \"\"\"\n        Assembles a connection string representation for an AMQP connection.\n\n        Arguments:\n            self (Self): A reference to the instance of AmqpConnection that this method will be called on.\n\n        Returns:\n            AmqpDsn: A Pydantic AMQP DSN model that represents the connection string.\n        \"\"\"\n        scheme = \"amqps\" if self.USE_SSL else \"amqp\"\n        query_params = urllib.parse.urlencode(self.QUERY_PARAMS) if self.QUERY_PARAMS else None\n        return AmqpDsn.build(\n            scheme=scheme,\n            password=self.PASSWORD,\n            host=self.HOST.split(\"://\")[-1],\n            port=self.PORT,\n            path=self.DATABASE,\n            query=query_params,\n        )\n</code></pre>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.AmqpConnection.CONN_STR","title":"<code>CONN_STR: Annotated[str, ConnType]</code>  <code>property</code>","text":"<p>The connection string, assembled from the other properties.</p> <p>This attribute is computed by calling the <code>_assemble_conn_str_value</code> method.</p> RETURNS DESCRIPTION <code>str</code> <p>The connection string, assembled from the other properties.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.OpenSearchNoCertConnection","title":"<code>OpenSearchNoCertConnection</code>","text":"<p>             Bases: <code>DBConnection[AnyHttpUrl]</code></p> <p>Represents an OpenSearch connection without requiring SSL certification.</p> ATTRIBUTE DESCRIPTION <code>SCHEME</code> <p>The scheme for this connection, either \"http\" or \"https\".</p> <p> TYPE: <code>Literal['http', 'https']</code> </p> <code>USERNAME</code> <p>The username for the OpenSearch service.</p> <p> TYPE: <code>str</code> </p> <code>PASSWORD</code> <p>The password for the OpenSearch service.</p> <p> TYPE: <code>str</code> </p> <code>HOST</code> <p>The host of the OpenSearch service.</p> <p> TYPE: <code>str</code> </p> <code>PORT</code> <p>The port of the OpenSearch service.</p> <p> TYPE: <code>int</code> </p> <code>TTL</code> <p>[Optional] The duration after which the connection times out. Default is 60.</p> <p> TYPE: <code>int</code> </p> <code>MAX_RETRIES</code> <p>[Optional] The maximum number of times the request to the connection can be retried. Default is 10.</p> <p> TYPE: <code>int</code> </p> <code>RETRY_ON_TIMEOUT</code> <p>[Optional] If true, retries occur on timed-out connections. Default is True.</p> <p> TYPE: <code>bool</code> </p> <code>CONN_DICT</code> <p>After being processed in <code>assemble_conn_dict</code>, this dict contains                                     details about host, authentication, connectivity, and SSL context.</p> <p> TYPE: <code>OpenSearchConnectionDict</code> </p> <code>CONN_STR</code> <p>The connection string for the OpenSearch service, assembled from,                             assembled from the other properties.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/databases/models.py</code> <pre><code>class OpenSearchNoCertConnection(DBConnection[AnyHttpUrl]):\n    \"\"\"\n    Represents an OpenSearch connection without requiring SSL certification.\n\n    Attributes:\n        SCHEME (Literal[\"http\", \"https\"]): The scheme for this connection, either \"http\" or \"https\".\n        USERNAME (str): The username for the OpenSearch service.\n        PASSWORD (str): The password for the OpenSearch service.\n        HOST (str): The host of the OpenSearch service.\n        PORT (int): The port of the OpenSearch service.\n        TTL (int): [Optional] The duration after which the connection times out. Default is 60.\n        MAX_RETRIES (int): [Optional] The maximum number of times the request to the connection can be retried.\n            Default is 10.\n        RETRY_ON_TIMEOUT (bool): [Optional] If true, retries occur on timed-out connections. Default is True.\n        CONN_DICT (OpenSearchConnectionDict): After being processed in `assemble_conn_dict`, this dict contains\n                                                details about host, authentication, connectivity, and SSL context.\n\n        CONN_STR (str): The connection string for the OpenSearch service, assembled from,\n                                        assembled from the other properties.\n    \"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    SCHEME: Literal[\"http\", \"https\"]\n    USERNAME: str\n    PASSWORD: str\n    HOST: str\n    PORT: int\n\n    TTL: int = 60\n    MAX_RETRIES: int = 10\n    RETRY_ON_TIMEOUT: bool = True\n\n    @computed_field\n    @property\n    def CONN_DICT(self: Self) -&gt; OpenSearchConnectionDict:\n        \"\"\"\n        Returns dict with OpenSearch connection parameters,\n        including host, scheme, port, authentication, and SSL context.\n\n        Warns:\n            ImportWarning: When opensearch-py is not installed, therefore the ssl_context can't be added.\n\n        Returns:\n            OpenSearchConnectionDict: The connection dictionary.\n        \"\"\"\n        conn_dict = OpenSearchConnectionDict(\n            hosts=(self.HOST,),\n            http_auth=(self.USERNAME, self.PASSWORD) if self.USERNAME else None,\n            scheme=self.SCHEME,\n            port=str(self.PORT),\n            timeout=self.TTL,\n            max_retries=self.MAX_RETRIES,\n            retry_on_timeout=self.RETRY_ON_TIMEOUT,\n        )\n\n        import ssl\n\n        try:\n            from opensearchpy.connection import create_ssl_context\n        except ImportError:\n            msg = \"Can't add SSL context to OpenSearch Connection Dict. Make sure that opensearch-py is installed.\"\n            warnings.warn(msg, ImportWarning, stacklevel=1)\n            return conn_dict\n\n        ssl_context = create_ssl_context()\n        ssl_context.check_hostname = False\n        ssl_context.verify_mode = ssl.CERT_NONE\n\n        conn_dict[\"ssl_context\"] = ssl_context\n        return conn_dict\n\n    def _assemble_conn_str_value(self: Self) -&gt; AnyHttpUrl:\n        \"\"\"\n        Assembles a connection string representation for an OpenSearch connection.\n\n        Arguments:\n            self (Self): A reference to the instance of `OpenSearchNoCertConnection` that this method will be called on.\n\n        Returns:\n            AnyHttpUrl: A Pydantic Http URL model (`AnyHttpUrl`) that represents the connection string.\n        \"\"\"\n        return AnyHttpUrl.build(\n            scheme=self.SCHEME,\n            username=self.USERNAME,\n            password=self.PASSWORD,\n            host=self.HOST,\n            port=self.PORT,\n        )\n</code></pre>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.OpenSearchNoCertConnection.CONN_STR","title":"<code>CONN_STR: Annotated[str, ConnType]</code>  <code>property</code>","text":"<p>The connection string, assembled from the other properties.</p> <p>This attribute is computed by calling the <code>_assemble_conn_str_value</code> method.</p> RETURNS DESCRIPTION <code>str</code> <p>The connection string, assembled from the other properties.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.OpenSearchNoCertConnection.CONN_DICT","title":"<code>CONN_DICT: OpenSearchConnectionDict</code>  <code>property</code>","text":"<p>Returns dict with OpenSearch connection parameters, including host, scheme, port, authentication, and SSL context.</p> WARNS DESCRIPTION <code>ImportWarning</code> <p>When opensearch-py is not installed, therefore the ssl_context can't be added.</p> RETURNS DESCRIPTION <code>OpenSearchConnectionDict</code> <p>The connection dictionary.</p> <p> TYPE: <code>OpenSearchConnectionDict</code> </p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.PostgresConnection","title":"<code>PostgresConnection</code>","text":"<p>             Bases: <code>DBConnection[PostgresDsn]</code></p> <p>Represents a connection to a Postgres database.</p> ATTRIBUTE DESCRIPTION <code>USERNAME</code> <p>The username for the Postgres database.</p> <p> TYPE: <code>str</code> </p> <code>PASSWORD</code> <p>The password for the Postgres database.</p> <p> TYPE: <code>str</code> </p> <code>HOST</code> <p>The host of the Postgres database.</p> <p> TYPE: <code>str</code> </p> <code>PORT</code> <p>[Optional] The port of the Postgres database. Default is 5432.</p> <p> TYPE: <code>int</code> </p> <code>DATABASE</code> <p>The name of the Postgres database.</p> <p> TYPE: <code>str</code> </p> <code>CONN_STR</code> <p>The connection string for the Postgres database, assembled from the                            other properties.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/databases/models.py</code> <pre><code>class PostgresConnection(DBConnection[PostgresDsn]):\n    \"\"\"\n    Represents a connection to a Postgres database.\n\n    Attributes:\n        USERNAME (str): The username for the Postgres database.\n        PASSWORD (str): The password for the Postgres database.\n        HOST (str): The host of the Postgres database.\n        PORT (int): [Optional] The port of the Postgres database. Default is 5432.\n        DATABASE (str): The name of the Postgres database.\n\n        CONN_STR (str): The connection string for the Postgres database, assembled from the\n                                       other properties.\n    \"\"\"\n\n    USERNAME: str\n    PASSWORD: str\n    HOST: str\n    PORT: int = 5432\n    DATABASE: str\n\n    def _assemble_conn_str_value(self: Self) -&gt; PostgresDsn:\n        \"\"\"\n        Assembles a connection string representation for a Postgres database connection.\n\n        Arguments:\n            self (Self): A reference to the instance of PostgresConnection that this method will be called on.\n\n        Returns:\n            PostgresDsn: A Pydantic Postgres DSN model that represents the connection string.\n        \"\"\"\n        return PostgresDsn.build(\n            scheme=\"postgresql\",\n            username=self.USERNAME,\n            password=self.PASSWORD,\n            host=self.HOST,\n            port=self.PORT,\n            path=self.DATABASE or \"\",\n        )\n</code></pre>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.PostgresConnection.CONN_STR","title":"<code>CONN_STR: Annotated[str, ConnType]</code>  <code>property</code>","text":"<p>The connection string, assembled from the other properties.</p> <p>This attribute is computed by calling the <code>_assemble_conn_str_value</code> method.</p> RETURNS DESCRIPTION <code>str</code> <p>The connection string, assembled from the other properties.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.RedisConnection","title":"<code>RedisConnection</code>","text":"<p>             Bases: <code>DBConnection[RedisDsn]</code></p> <p>Represents a Redis database connection string.</p> ATTRIBUTE DESCRIPTION <code>PASSWORD</code> <p>The password for the Redis database.</p> <p> TYPE: <code>str</code> </p> <code>HOST</code> <p>The host of the Redis database.</p> <p> TYPE: <code>str</code> </p> <code>PORT</code> <p>[Optional] The port for the Redis database. Default is 6379.</p> <p> TYPE: <code>int</code> </p> <code>DATABASE</code> <p>[Optional] The database index for the Redis database. Default is \"0\".</p> <p> TYPE: <code>str</code> </p> <code>USE_SSL</code> <p>[Optional] If true, the Redis service is assumed to use SSL. Default is True.</p> <p> TYPE: <code>bool</code> </p> <code>CONN_STR</code> <p>The connection string for the Redis service, assembled from the other properties.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/kyotsu/config/databases/models.py</code> <pre><code>class RedisConnection(DBConnection[RedisDsn]):\n    \"\"\"\n    Represents a Redis database connection string.\n\n    Attributes:\n        PASSWORD (str): The password for the Redis database.\n        HOST (str): The host of the Redis database.\n        PORT (int): [Optional] The port for the Redis database. Default is 6379.\n        DATABASE (str): [Optional] The database index for the Redis database. Default is \"0\".\n        USE_SSL (bool): [Optional] If true, the Redis service is assumed to use SSL. Default is True.\n\n        CONN_STR (str): The connection string for the Redis service, assembled from the other properties.\n    \"\"\"\n\n    PASSWORD: str | None = None\n    HOST: str\n    PORT: int = 6379\n    DATABASE: str = \"0\"\n\n    USE_SSL: bool = True\n\n    def _assemble_conn_str_value(self: Self) -&gt; RedisDsn:\n        \"\"\"\n        Assembles a connection string representation for a Redis database connection.\n\n        Arguments:\n            self (Self): A reference to the instance of RedisConnection that this method will be called on.\n\n        Returns:\n            RedisDsn: A Pydantic Redis DSN model that represents the connection string.\n        \"\"\"\n        scheme = \"rediss\" if self.USE_SSL else \"redis\"\n        return RedisDsn.build(\n            scheme=scheme,\n            password=self.PASSWORD,\n            host=self.HOST.split(\"://\")[-1],\n            port=self.PORT,\n            path=self.DATABASE or \"\",\n        )\n</code></pre>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/#kyotsu.config.databases.models.RedisConnection.CONN_STR","title":"<code>CONN_STR: Annotated[str, ConnType]</code>  <code>property</code>","text":"<p>The connection string, assembled from the other properties.</p> <p>This attribute is computed by calling the <code>_assemble_conn_str_value</code> method.</p> RETURNS DESCRIPTION <code>str</code> <p>The connection string, assembled from the other properties.</p>","tags":["API Reference","Configuration","Databases"]},{"location":"modules/config/databases/types/","title":"Ky\u014dts\u016b Config - Databases types","text":"","tags":["API Reference","Configuration","Databases","Types"]},{"location":"modules/config/databases/types/#kyotsu.config.databases._types","title":"<code>kyotsu.config.databases._types</code>","text":"<p>This module contains types that are used for <code>kyotsu.config.databases</code> <code>mixins</code> and <code>models</code>.</p> ATTRIBUTE DESCRIPTION <code>ConnType</code> <p>TypeVar that used for generic <code>DBConnection</code> models.</p> <p> </p> CLASS DESCRIPTION <code>AmqpQueryParams</code> <p>Represents the set of query params used for AMQP connection.</p> <code>OpenSearchConnectionDict</code> <p>Represents the dictionary of connection parameters needed for an OpenSearch connection.</p>","tags":["API Reference","Configuration","Databases","Types"]},{"location":"modules/config/databases/types/#kyotsu.config.databases._types.ConnType","title":"<code>ConnType = TypeVar('ConnType')</code>  <code>module-attribute</code>","text":"<p>Type for <code>CONN_STR</code> in classes inherited from generic <code>DBConnection</code>.</p>","tags":["API Reference","Configuration","Databases","Types"]},{"location":"modules/config/databases/types/#kyotsu.config.databases._types.AmqpQueryParams","title":"<code>AmqpQueryParams</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>This <code>TypedDict</code> subclass represents the set of query parameters that can be used on an AMQP connection.</p> <p>These parameters include detailed AMQP client configurations, such as backpressure detection, retry delay, socket timeout and many others.</p> <p>This dict should be used as the <code>QUERY_PARAMS</code> attribute of an <code>AmqpConnection</code> instance.</p> <p>See more details at: pika.connection.URLParameters</p> Source code in <code>src/kyotsu/config/databases/_types.py</code> <pre><code>class AmqpQueryParams(TypedDict, total=False):\n    \"\"\"\n    This `TypedDict` subclass represents the set of query parameters that can be used on an AMQP connection.\n\n    These parameters include detailed AMQP client configurations, such as backpressure detection, retry delay,\n    socket timeout and many others.\n\n    This dict should be used as the `QUERY_PARAMS` attribute of an `AmqpConnection` instance.\n\n    See more details at: [pika.connection.URLParameters](https://pika.readthedocs.io/en/stable/modules/parameters.html#pika.connection.URLParameters)\n    \"\"\"\n\n    backpressure_detection: Literal[\"t\"]\n    channel_max: int\n    connection_attempts: int\n    frame_max: int\n    heartbeat: int\n    locale: str\n    ssl_options: dict[str, str]\n    retry_delay: int\n    socket_timeout: int\n</code></pre>","tags":["API Reference","Configuration","Databases","Types"]},{"location":"modules/config/databases/types/#kyotsu.config.databases._types.OpenSearchConnectionDict","title":"<code>OpenSearchConnectionDict</code>","text":"<p>             Bases: <code>TypedDict</code></p> <p>This <code>TypedDict</code> subclass represents the dictionary of connection parameters needed for an OpenSearch connection.</p> <p>It is used in the <code>CONN_DICT</code> attribute of an <code>OpenSearchNoCertConnection</code> instance after being processed in <code>assemble_conn_dict</code> method.</p> <p>This dict establishes details about hosts, authentication, scheme, port, and SSL context, which all will be used to configure and establish the OpenSearch connection.</p> Source code in <code>src/kyotsu/config/databases/_types.py</code> <pre><code>class OpenSearchConnectionDict(TypedDict, total=False):\n    \"\"\"\n    This `TypedDict` subclass represents the dictionary of connection parameters needed for an OpenSearch connection.\n\n    It is used in the `CONN_DICT` attribute of an `OpenSearchNoCertConnection` instance after being processed in\n    `assemble_conn_dict` method.\n\n    This dict establishes details about hosts, authentication, scheme, port, and SSL context, which all will be used to\n    configure and establish the OpenSearch connection.\n    \"\"\"\n\n    hosts: Sequence[str]\n    http_auth: tuple[str, str] | None\n    scheme: Literal[\"http\", \"https\"]\n    port: str\n\n    ssl_context: NotRequired[SSLContext]\n    timeout: NotRequired[int]\n    max_retries: NotRequired[int]\n    retry_on_timeout: NotRequired[bool]\n</code></pre>","tags":["API Reference","Configuration","Databases","Types"]},{"location":"modules/logging/","title":"Logging","text":""},{"location":"modules/logging/error_codes/","title":"Ky\u014dts\u016b Logging - Error Codes","text":""},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes","title":"<code>kyotsu.logging.error_codes</code>","text":"<p>This module contains all possible error codes used across microservices.</p> <p>The intention is to avoid error codes duplication, standardize categories, provide messages and descriptions through enums and dataclasses.</p> <p>These error codes are not intended to be reused several times, and it's better to create a separate error for every exception handling/raise. With that it's much easier to debug the application.</p> CLASS DESCRIPTION <code>ErrorCodesKeeper</code> <p>Dataclass for all error codes.</p> ATTRIBUTE DESCRIPTION <code>ERROR_CODES</code> <p>Constant entrypoint to all existing error codes.</p> <p> TYPE: <code>Final[ErrorCodesKeeper]</code> </p>"},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes.ERROR_CODES","title":"<code>ERROR_CODES: Final[ErrorCodesKeeper] = ErrorCodesKeeper()</code>  <code>module-attribute</code>","text":"<p>An entrypoint to the \u2728error codes world\u2728. Keeps all error codes.</p>"},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes.ErrorCodesKeeper","title":"<code>ErrorCodesKeeper</code>","text":"<p>A single keeper for all error codes. Instance of this class serves as an entrypoint to the error codes world.</p> <p>To introduce a new category simply add new class attribute with Prefix as attribute name, <code>Final[&lt;your_keeper_class&gt;]</code> as attribute type, and your keeper class instance as attribute value.</p> ATTRIBUTE DESCRIPTION <code>UN</code> <p>Keeps uncategorized error codes.</p> <p> TYPE: <code>Final[UncategorizedKeeper]</code> </p> <code>KTS</code> <p>Keeps kyotsu runtime error codes.</p> <p> TYPE: <code>Final[KyotsuKeeper]</code> </p> Source code in <code>src/kyotsu/logging/error_codes/definitions/_keeper.py</code> <pre><code>@error_code_keeper\nclass ErrorCodesKeeper:\n    \"\"\"\n    A single keeper for all error codes.\n    Instance of this class serves as an entrypoint to the :sparkles:error codes world:sparkles:.\n\n\n    To introduce a new category simply add new class attribute with\n    Prefix as attribute name, `Final[&lt;your_keeper_class&gt;]` as attribute type,\n    and your keeper class instance as attribute value.\n\n    Attributes:\n        UN: Keeps uncategorized error codes.\n        KTS: Keeps kyotsu runtime error codes.\n    \"\"\"\n\n    UN: Final[UncategorizedKeeper] = UncategorizedKeeper()\n    KTS: Final[KyotsuKeeper] = KyotsuKeeper()\n    SCH: Final[SchedulerKeeper] = SchedulerKeeper()\n</code></pre>"},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes.dataclasses","title":"<code>kyotsu.logging.error_codes.dataclasses</code>","text":"<p>This module defines <code>ErrorCode</code> class and <code>error_code_keeper</code> decorator to handle application errors efficiently.</p> CLASS DESCRIPTION <code>ErrorCode</code> <p>A dataclass representing a structured error code that includes several descriptions useful for        different audiences such as end user, developers, and support staff.</p> FUNCTION DESCRIPTION <code>error_code_keeper</code> <p>A decorator that creates a class that contains all error codes.</p> Example <p>Example of creating your error codes and keepers.</p> <pre><code>from kyotsu.logging.error_codes import Prefix\n\n@error_code_keeper\nclass AD_CErrorCodes:\n    ZERO_DIVISION_ERROR: Final[ErrorCode] = ErrorCode(\n        _code=1000,\n        _prefix=Prefix.AD_C,\n        _message=\"Divider can't be zero, please try another number\",\n        _dev_description=\"Handled ZeroDivisionError exception caused by user input.\",\n        _hp_description=\"User tried to divide by zero. The zero shouldn't be entered as a divider.\",\n    )\n\n@error_code_keeper\nclass SCHErrorCodes:\n    EXTERNAL_SERVICE_ERROR: Final[ErrorCode] = ErrorCode(\n        1001,\n        Prefix.SCH,\n        _dev_description=\"EXTERNAL_SERVICE returned an error. Check service logs for more details.\",\n        _hp_description=\"Error occurred during services communication. Raise a request for the dev team.\",\n    )\n\n@error_code_keeper\nclass MixedErrorCodes:\n    AD_C: Final[AD_CErrorCodes] = AD_CErrorCodes()\n    SCH: Final[SCHErrorCodes] = SCHErrorCodes()\n\nERROR_CODES: Final[MixedErrorCodes] = MixedErrorCodes()\n</code></pre>"},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes.dataclasses.ErrorCode","title":"<code>ErrorCode</code>  <code>dataclass</code>","text":"<p>This class is used to define an error code and use it later in the application.</p> ATTRIBUTE DESCRIPTION <code>_prefix</code> <p>A prefix for categorization error.</p> <p> TYPE: <code>str | StrEnum</code> </p> <code>_code</code> <p>A numeric code for the error, should be &gt;= 1.</p> <p> TYPE: <code>int</code> </p> <code>message</code> <p>An error message that can be displayed to the user.       If the error is not designed for the end user keep the default value.</p> <p> TYPE: <code>str</code> </p> <code>code</code> <p>A property that should be used to obtain full error code. Combination of <code>_prefix</code> and <code>_code</code> attributes.</p> <p> TYPE: <code>str</code> </p> Example <p>Fully initialized <pre><code>    &gt;&gt;&gt; error = ErrorCode(\"A\", 1, \"Some Error Message\")\n    &gt;&gt;&gt; error\n    ErrorCode(_prefix='A', _code=1, message='Some Error Message')\n    &gt;&gt;&gt; error.code\n    'A0001'\n    &gt;&gt;&gt; str(error)\n    'A0001: Some Error Message'\n</code></pre></p> <p>Fallback to default values <pre><code>&gt;&gt;&gt; error = ErrorCode(\"B\", 11)\n&gt;&gt;&gt; error\nErrorCode(_prefix='B', _code=11, message='An unknown error has occurred')\n&gt;&gt;&gt; error.code\n'B0011'\n&gt;&gt;&gt; str(error)\n'B0011: An unknown error has occurred'\n</code></pre></p> <p>The class is frozen and can't be modified after initialization. <pre><code>&gt;&gt;&gt; error = ErrorCode(\"C\", 2222)\n&gt;&gt;&gt; error._code = 2\nTraceback (most recent call last):\ndataclasses.FrozenInstanceError: ...\n</code></pre></p> <p>The <code>ErrorCode</code> is Hashable, therefore you can use any instance as a dictionary key, if you need it for some reason. <pre><code>&gt;&gt;&gt; error = ErrorCode(\"D\", 333)\n&gt;&gt;&gt; d = {error: error.code}\n&gt;&gt;&gt; d[error]\n'D0333'\n</code></pre></p> Source code in <code>src/kyotsu/logging/error_codes/dataclasses.py</code> <pre><code>@dataclasses.dataclass(\n    slots=True,\n    frozen=True,\n    eq=True,\n)\nclass ErrorCode:\n    \"\"\"This class is used to define an error code and use it later in the application.\n\n    Attributes:\n        _prefix: A prefix for categorization error.\n        _code: A numeric code for the error, should be &gt;= 1.\n        message: An error message that can be displayed to the user.\n                  If the error is not designed for the end user keep the default value.\n        code: A property that should be used to obtain full error code. Combination of `_prefix` and `_code` attributes.\n\n\n    Example:\n        Fully initialized\n        ```python3\n            &gt;&gt;&gt; error = ErrorCode(\"A\", 1, \"Some Error Message\")\n            &gt;&gt;&gt; error\n            ErrorCode(_prefix='A', _code=1, message='Some Error Message')\n            &gt;&gt;&gt; error.code\n            'A0001'\n            &gt;&gt;&gt; str(error)\n            'A0001: Some Error Message'\n\n        ```\n\n        Fallback to default values\n        ```python3\n        &gt;&gt;&gt; error = ErrorCode(\"B\", 11)\n        &gt;&gt;&gt; error\n        ErrorCode(_prefix='B', _code=11, message='An unknown error has occurred')\n        &gt;&gt;&gt; error.code\n        'B0011'\n        &gt;&gt;&gt; str(error)\n        'B0011: An unknown error has occurred'\n\n        ```\n\n        The class is frozen and can't be modified after initialization.\n        ```python3\n        &gt;&gt;&gt; error = ErrorCode(\"C\", 2222)\n        &gt;&gt;&gt; error._code = 2\n        Traceback (most recent call last):\n        dataclasses.FrozenInstanceError: ...\n\n        ```\n\n        The `ErrorCode` is [Hashable][collections.abc.Hashable],\n        therefore you can use any instance as a dictionary key,\n        if you need it for some reason.\n        ```python3\n        &gt;&gt;&gt; error = ErrorCode(\"D\", 333)\n        &gt;&gt;&gt; d = {error: error.code}\n        &gt;&gt;&gt; d[error]\n        'D0333'\n\n        ```\n    \"\"\"\n\n    _prefix: str | StrEnum\n    _code: int\n    message: str = \"An unknown error has occurred\"\n\n    @property\n    def code(self: Self) -&gt; str:\n        \"\"\"Concatenate `self._prefix` and `self._code`.\"\"\"\n        return f\"{self._prefix}{self._code:0&gt;4}\"\n\n    def __str__(self: Self) -&gt; str:\n        return f\"{self.code}: {self.message}\"\n</code></pre>"},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes.dataclasses.ErrorCode.code","title":"<code>code: str</code>  <code>property</code>","text":"<p>Concatenate <code>self._prefix</code> and <code>self._code</code>.</p>"},{"location":"modules/logging/error_codes/#kyotsu.logging.error_codes.dataclasses.error_code_keeper","title":"<code>error_code_keeper(__cls)</code>","text":"<p>A decorator that creates a dataclass with <code>init=False</code> and <code>frozen=True</code>.</p> <p>Should be used to create error keepers and store kyotsu.logging.error_codes.ErrorCodes.</p> ATTRIBUTE DESCRIPTION <code>__cls</code> <p>Decorated class that should be augmented with dataclass methods</p> <p> TYPE: <code>type[_T]</code> </p> RETURNS DESCRIPTION <code>type[_T]</code> <p>A dataclass with <code>init=False</code> and <code>frozen=True</code>.</p> Example <p>Using <code>@error_code_keeper</code> decorator to create new keeper.</p> <pre><code>&gt;&gt;&gt; from kyotsu.logging.error_codes.dataclasses import error_code_keeper, ErrorCode\n&gt;&gt;&gt; from typing import Final\n\n&gt;&gt;&gt; @error_code_keeper\n... class BErrorKeeper:\n...     UNEXPECTED_FOR_B: Final[ErrorCode] = ErrorCode(\"B\", 1, \"Unknown error in B context\")\n\n&gt;&gt;&gt; @error_code_keeper\n... class AErrorKeeper:\n...     UNEXPECTED_FOR_A: Final[ErrorCode] = ErrorCode(\"A\", 1, \"Unknown error in A context\")\n\n&gt;&gt;&gt; @error_code_keeper\n... class ErrorKeeper:\n...     GENERIC_UNEXPECTED: Final[ErrorCode] = ErrorCode(\"UN\", 1)\n...     B: Final[BErrorKeeper] = BErrorKeeper()\n...     A: Final[AErrorKeeper] = AErrorKeeper()\n\n&gt;&gt;&gt; ERROR_CODES = ErrorKeeper()\n\n&gt;&gt;&gt; ERROR_CODES.GENERIC_UNEXPECTED\nErrorCode(_prefix='UN', _code=1, message='An unknown error has occurred')\n&gt;&gt;&gt; ERROR_CODES.B.UNEXPECTED_FOR_B\nErrorCode(_prefix='B', _code=1, message='Unknown error in B context')\n&gt;&gt;&gt; ERROR_CODES.A.UNEXPECTED_FOR_A\nErrorCode(_prefix='A', _code=1, message='Unknown error in A context')\n</code></pre> Source code in <code>src/kyotsu/logging/error_codes/dataclasses.py</code> <pre><code>def error_code_keeper(__cls: type[_T]) -&gt; type[_T]:\n    \"\"\"A decorator that creates a dataclass with `init=False` and `frozen=True`.\n\n    Should be used to create error keepers and store [kyotsu.logging.error_codes.ErrorCode][]s.\n\n    Attributes:\n        __cls (type[_T]): Decorated class that should be augmented with dataclass methods\n\n    Returns:\n        A dataclass with `init=False` and `frozen=True`.\n\n    Example:\n        Using `@error_code_keeper` decorator to create new keeper.\n\n        ```python3\n        &gt;&gt;&gt; from kyotsu.logging.error_codes.dataclasses import error_code_keeper, ErrorCode\n        &gt;&gt;&gt; from typing import Final\n\n        &gt;&gt;&gt; @error_code_keeper\n        ... class BErrorKeeper:\n        ...     UNEXPECTED_FOR_B: Final[ErrorCode] = ErrorCode(\"B\", 1, \"Unknown error in B context\")\n\n        &gt;&gt;&gt; @error_code_keeper\n        ... class AErrorKeeper:\n        ...     UNEXPECTED_FOR_A: Final[ErrorCode] = ErrorCode(\"A\", 1, \"Unknown error in A context\")\n\n        &gt;&gt;&gt; @error_code_keeper\n        ... class ErrorKeeper:\n        ...     GENERIC_UNEXPECTED: Final[ErrorCode] = ErrorCode(\"UN\", 1)\n        ...     B: Final[BErrorKeeper] = BErrorKeeper()\n        ...     A: Final[AErrorKeeper] = AErrorKeeper()\n\n        &gt;&gt;&gt; ERROR_CODES = ErrorKeeper()\n\n        &gt;&gt;&gt; ERROR_CODES.GENERIC_UNEXPECTED\n        ErrorCode(_prefix='UN', _code=1, message='An unknown error has occurred')\n        &gt;&gt;&gt; ERROR_CODES.B.UNEXPECTED_FOR_B\n        ErrorCode(_prefix='B', _code=1, message='Unknown error in B context')\n        &gt;&gt;&gt; ERROR_CODES.A.UNEXPECTED_FOR_A\n        ErrorCode(_prefix='A', _code=1, message='Unknown error in A context')\n\n        ```\n    \"\"\"\n    return dataclasses.dataclass(init=False, frozen=True)(__cls)\n</code></pre>"},{"location":"modules/logging/error_codes/definitions/","title":"Ky\u014dts\u016b Logging - Error Codes Reference","text":"<p>In this file you can find implementation of all error codes. If you are looking for detailed error descriptions check:</p>"},{"location":"modules/logging/error_codes/definitions/#todo-add-links","title":"ToDo: add links","text":"<p>[recipes/error_codes/dev][] [recipes/error_codes/hp][]</p>"},{"location":"modules/logging/error_codes/definitions/#kyotsu.logging.error_codes.definitions.uncategorized","title":"<code>kyotsu.logging.error_codes.definitions.uncategorized</code>","text":"<p>This module contains keeper class for uncategorized errors.</p>"},{"location":"modules/logging/error_codes/definitions/#kyotsu.logging.error_codes.definitions.uncategorized.UncategorizedKeeper","title":"<code>UncategorizedKeeper</code>","text":"<p>Collection of uncategorized errors.</p> Danger <p>Do not add anything to this category unless you are absolutely sure in your actions.</p> ATTRIBUTE DESCRIPTION <code>UNHANDLED_EXCEPTION</code> <p>Error code that indicates previously unhandled exception.</p> <p> TYPE: <code>Final[ErrorCode]</code> </p> Source code in <code>src/kyotsu/logging/error_codes/definitions/uncategorized.py</code> <pre><code>@error_code_keeper\nclass UncategorizedKeeper:\n    \"\"\"Collection of uncategorized errors.\n\n    Danger:\n        Do not add anything to this category unless you are absolutely sure in your actions.\n        # ToDo: Add link to recipes\n        See: [Using Error Prefix]()\n\n    Attributes:\n        UNHANDLED_EXCEPTION: Error code that indicates previously unhandled exception.\n    \"\"\"\n\n    UNHANDLED_EXCEPTION: Final[ErrorCode] = ErrorCode(\n        Prefix.UN,\n        1\n        # _dev_description=(\n        #     \"Unhandled error has occurred. Please consider validating an error source and add error handler.\"\n        # ),\n        # _hp_description=\"Something bad happened. Please contact developers for further investigation.\",\n    )\n\n    REQUEST_VALIDATION_ERROR: Final[ErrorCode] = ErrorCode(\n        Prefix.UN,\n        2,\n        message=\"Unprocessable entity in request\",\n        # _dev_description=(\n        #     \"FastAPI request validation error has occurred. \"\n        #     \"Consider validating request/query params/etc. over pydantic models.\"\n        # ),\n        # _hp_description=(\n        #     \"At some point of Frontend-to-Service or Service-to-Service communication \"\n        #     \"some part of request/query params/etc. appeared inconsistent with API contract. \"\n        #     \"This can be caused by incorrect user input or by poor API contract handling. \"\n        #     \"Send this log to dev team for further investigation.\"\n        # ),\n    )\n\n    RESPONSE_VALIDATION_ERROR: Final[ErrorCode] = ErrorCode(\n        Prefix.UN,\n        3,\n        # _dev_description=(\n        #     \"FastAPI response validation error has occurred. Consider validating response. over pydantic models.\"\n        # ),\n        # _hp_description=(\n        #     \"At some point backend returned invalid response (inconsistent with API contract). \"\n        #     \"Send this log to dev team for further investigation.\"\n        # ),\n    )\n</code></pre>"},{"location":"modules/logging/error_codes/definitions/#kyotsu.logging.error_codes.definitions.uncategorized.UncategorizedKeeper--todo-add-link-to-recipes","title":"ToDo: Add link to recipes","text":"<p>See: Using Error Prefix</p>"},{"location":"recipes/","title":"Recipes","text":""}]}